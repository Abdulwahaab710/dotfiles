#!/usr/bin/env ruby

class GitClone
  class << self
    def clone
      args = ARGV[0]
      username, repo = extract_username_and_repo_name(args)
      puts git_clone(username, repo)
      cd build_path(GITHUB_FOLDER_PATH, username, repo)
    end

    private

    GIT_REGEX = '(git@[A-Za-z\.]*:|https:\/\/[A-Za-z\.]*\/)([A-Za-z_\-0-9]*)\/([A-Za-z_\-\.]*)'.freeze
    USERNAME_AND_REPO_REGEX = '([A-Za-z0-9_\-]*)\/([A-Za-z0-9_\-\.]*)'.freeze
    GITHUB_FOLDER_PATH = ['$HOME', 'src', 'github.com'].freeze

    def extract_username_and_repo_name(args)
      return extract_matched_groups_regex(args, USERNAME_AND_REPO_REGEX) if args =~ /#{USERNAME_AND_REPO_REGEX}/

      _, username, repo = extract_matched_groups_regex(args, GIT_REGEX)
      [username, repo]
    end

    def git_clone(username, repo)
      username = username.capitalize
      create_folder(username)
      run_command(
        'git clone', "git@github.com:#{username}/#{repo}.git", build_path(
                                                                 *GITHUB_FOLDER_PATH, username, repo
                                                               )
      )
      cd(build_path(*GITHUB_FOLDER_PATH, username, repo))
    end

    def create_folder(username)
      run_command 'mkdir', '-p', build_path(*GITHUB_FOLDER_PATH, username)
    end

    # def run_command_safely(*command)
    #   Open3.capture3(*command)
    # end

    def run_command(*command)
      `#{command.join(' ')}`
    end

    def build_path(*folders)
      folders.join('/')
    end

    def home_path
      run_command('echo $HOME').strip
    end

    def extract_matched_groups_regex(str, regex)
      str.match(/#{regex}/).captures
    end

    def cd(path)
      return run_command('cd', build_path(path)) unless path.is_a? String

      run_command('cd', path)
    end
  end
end

GitClone.clone
